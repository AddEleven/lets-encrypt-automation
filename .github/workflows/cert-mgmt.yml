# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
        env:
          description: 'Name of the person to greet'
          required: true
          default: 'Staging'

permissions:
  id-token: write
  contents: read
  
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: |
          echo "ENV: ${{ github.event.inputs.env }}"
          
      - name: Azure Login
        uses: azure/login@v1
        with:
           client-id: ${{ secrets.AZURE_CLIENT_ID }}
           tenant-id: ${{ secrets.AZURE_TENANT_ID }}
           subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # run a bicep deployment
      - name: Generate Let's Encrypt Certificate
        id: generate-cert
        env:
            AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
            AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
        run: |
          ./.github/scripts/create-lets-encrypt-cert.ps1 `
            -Email "alex@alexdantico.com" `
            -Domain "blog.alexdantico.com" `
            -ContactEmail "alex@alexdantico.com" `
            -ResourceGroupName "rg-ad-dns" `
            -DnsZoneName "alexdantico.com"
        shell: pwsh

      # In the step that generates the password:
      - name: Generate certificate and password
        id: print-cert
        shell: pwsh
        run: |
          
          # Convert to plain text for output (only do this when necessary!)
          Write-Output "111111111111111111111111111111111"
          Write-Output $env:secure_password
          $plainPassword = [System.Net.NetworkCredential]::new('', $env:secure_password).Password
          
          # Output the plain text password - GitHub Actions will mask secrets automatically
          Write-Output "AAAAAAAAAAAAAAAAAAAEEEEEEEEEEEEE"
          Write-Output $plainPassword
    
      # - name: Use Certificate in Next Step
      #   run: |
      #     echo "Certificate is at: ${{ steps.generate-cert.outputs.cert_path }}"
      #     # Use the certificate file directly in your next step
      #     # For example, you could upload it to Key Vault:
      #     echo "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
      #     echo ${{ steps.generate-cert.outputs.secure_password }}
      #     #az keyvault certificate import --vault-name kv-adtest-001 --name blog-alexdantico-com --file ${{ steps.generate-cert.outputs.cert_path }} --password securePassword123
