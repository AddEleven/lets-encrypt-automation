name: Generate-Lets-Encrypt-Certificate

on:
  # Run every 30 days (halfway through 90-day validity period)
  schedule:
    - cron: '0 0 1,15 * *'  # Runs 1st and 15th of each month

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
        useStaging:
          description: 'Use Lets Encrypt staging environment (for testing)'
          required: false
          type: boolean
          default: false

permissions:
  id-token: write
  contents: read
  
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: |
          echo "ENV: ${{ github.event.inputs.env }}"
          
      - name: Azure Login
        uses: azure/login@v1
        with:
           client-id: ${{ secrets.AZURE_CLIENT_ID }}
           tenant-id: ${{ secrets.AZURE_TENANT_ID }}
           subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # run a bicep deployment
      - name: Generate Let's Encrypt Certificate
        id: generate-cert
        env:
            AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
            AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
        run: |
          # Default to PROD unless explicitly set to use staging
          $acmeEnv = if ('${{ github.event.inputs.useStaging }}' -eq 'true') { 'LE_STAGE' } else { 'LE_PROD' }
          
          ./.github/scripts/create-lets-encrypt-cert.ps1 `
            -Email "${{ secrets.LETS_ENCRYPT_EMAIL }}" `
            -Domain "${{ vars.DOMAIN_NAME }}" `
            -DnsZoneName "${{ vars.AZURE_DNS_ZONE_NAME }}" `
            -KeyVaultName "${{ secrets.KEY_VAULT_RESOURCE_NAME }}" `
            -RenewalThresholdDays 90
        shell: pwsh
